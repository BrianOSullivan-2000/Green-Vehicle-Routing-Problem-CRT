import src.generate_grid.grid as grid
import random
import numpy as np
import geopandas as gpd
import pandas as pd
import matplotlib.pyplot as plt
from scipy.spatial import cKDTree, distance_matrix
import math
import networkx as nx
import momepy
import itertools
import osmnx as ox
import utm
from src.elevation_call.create_evel_query_file import create_elev_query_file
from src.elevation_call.read_elev_query_result import read_elev_res
from src.generate_instance.create_instance import create_instance
import src.generate_tsplib.generate_tsplib as tsp


ns = ["20", "50", "100", "200", "500", "1000"]
depots = ["centre", "corner"]
traffics = ["weekday_offpeak", "weekday_peak", "weekend_peak"]
rains = ["heavy", "mild", "low"]

for domain in ["dublin_south"]:
    for n in ns:
        for depot in depots:
            for traffic in traffics:
                for rain in rains:

                    dublin = create_instance(domain, n, depot, traffic, rain)

                    nodes = dublin.df[dublin.df['is_vertice'] != 0].values

                    nodes = nodes[:, 0:2]
                    edge_weights = dublin.cost_matrix.to_numpy()

                    if traffic == "weekday_offpeak":
                        t = "wdo"
                    elif traffic == "weekday_peak":
                        t = "wdp"
                    elif traffic == "weekend_peak":
                        t = "wep"

                    filename = "instances/{}/{}_rainfall/{}/{}_n{}".format(domain, rain, traffic, depot, n)

                    d = "m50"
                    instance_name = "{}_{}_{}_{}_n{}".format(d, depot[0:2], rain[0], t, n)

                    print(instance_name)

                    a1 = dublin.cost_matrix.values.flatten()[dublin.cost_matrix.values.flatten() != 0].shape[0]
                    a2 = dublin.distance_matrix.values.flatten()[dublin.distance_matrix.values.flatten() != 0].shape[0]

                    comment = "Generated by Finucane, Fulcher, O'Sullivan, and Seth (2021)"

                    if a1 != a2:
                        print("{} has a bug")

                    tsp.generate_tsplib(filename=filename, comment=comment, instance_name=instance_name, capacity=100,
                                        edge_weight_type="EXPLICIT", edge_weight_format="SPARSE_MATRIX", nodes=nodes,
                                        demand=np.random.randint(1,4,len(nodes)), depot_index=[0], edge_weights=edge_weights)
